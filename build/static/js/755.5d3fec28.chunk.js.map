{"version":3,"file":"static/js/755.5d3fec28.chunk.js","mappings":"0RAuDA,QAlDA,WACE,MAAOA,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,QACtCC,EAAYC,IAAiBF,EAAAA,EAAAA,UAAS,iBACtCG,EAAWC,IAAgBJ,EAAAA,EAAAA,UAAS,OACpCK,EAAeC,IAAoBN,EAAAA,EAAAA,UAAS,IAUnD,OACIO,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wBACJC,EAAAA,EAAAA,KAAA,SACEC,KAAK,iBACLC,MAAOT,IAAa,IAAIU,MAAOC,cAC/BC,SAAWC,GAAMZ,EAAaY,EAAEC,OAAOL,UAGzCL,EAAAA,EAAAA,MAAA,OAAKW,MAAO,CAAEC,QAAS,OAAQC,IAAK,QAASX,SAAA,EAC3CC,EAAAA,EAAAA,KAAA,UAAQE,MAAOd,EAAYiB,SAAWC,GAAMjB,EAAciB,EAAEC,OAAOL,OAAOH,SACvEY,EAAUC,IAAKC,IACdb,EAAAA,EAAAA,KAAA,UAAiBE,MAAOW,EAAGd,SAAEc,GAAhBA,OAIjBb,EAAAA,EAAAA,KAAA,QAAAD,SAAM,YAENC,EAAAA,EAAAA,KAAA,UAAQE,MAAOX,EAAYc,SAAWC,GAAMd,EAAcc,EAAEC,OAAOL,OAAOH,SACvEY,EAAUC,IAAKC,IACdb,EAAAA,EAAAA,KAAA,UAAiBE,MAAOW,EAAGd,SAAEc,GAAhBA,UAKnBb,EAAAA,EAAAA,KAAA,UAAQc,QAjCQC,KACpB,IAAKtB,EAAW,OAEhB,MACMuB,EADKC,EAAAA,GAASC,QAAQzB,EAAW,CAAE0B,KAAM/B,IAC1BgC,QAAQ7B,GAAY8B,SAAS,4BAClDzB,EAAiBoB,IA4BkBjB,SAAC,YAE/BJ,IACCE,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,oBAAwB,IAAEJ,OAK9C,C","sources":["Components/TimezoneConvertor/TimezoneConverter.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { DateTime } from 'luxon';\nimport timezones from './timezones.json'; // A list of IANA timezones\nimport '../../App.css';\n\nfunction TimezoneConverter() {\n  const [sourceZone, setSourceZone] = useState('UTC');\n  const [targetZone, setTargetZone] = useState('Asia/Kolkata');\n  const [inputTime, setInputTime] = useState(null);\n  const [convertedTime, setConvertedTime] = useState('');\n\n  const handleConvert = () => {\n    if (!inputTime) return;\n\n    const dt = DateTime.fromISO(inputTime, { zone: sourceZone });\n    const converted = dt.setZone(targetZone).toFormat('yyyy-LL-dd HH:mm:ss ZZZZ');\n    setConvertedTime(converted);\n  };\n  \n  return (\n      <div className='app-container'>\n        <h3>Timezone Convertor</h3>\n        <input\n          type=\"datetime-local\"\n          value={inputTime || new Date().toUTCString()}\n          onChange={(e) => setInputTime(e.target.value)}\n        />\n\n        <div style={{ display: 'flex', gap: '10px' }}>\n          <select value={sourceZone} onChange={(e) => setSourceZone(e.target.value)}>\n            {timezones.map((tz) => (\n              <option key={tz} value={tz}>{tz}</option>\n            ))}\n          </select>\n\n          <span>â†’</span>\n\n          <select value={targetZone} onChange={(e) => setTargetZone(e.target.value)}>\n            {timezones.map((tz) => (\n              <option key={tz} value={tz}>{tz}</option>\n            ))}\n          </select>\n        </div>\n\n        <button onClick={handleConvert}>Convert</button>\n\n        {convertedTime && (\n          <div>\n            <strong>Converted Time:</strong> {convertedTime}\n          </div>\n        )}\n      </div>\n  );\n}\n\nexport default TimezoneConverter;\n"],"names":["sourceZone","setSourceZone","useState","targetZone","setTargetZone","inputTime","setInputTime","convertedTime","setConvertedTime","_jsxs","className","children","_jsx","type","value","Date","toUTCString","onChange","e","target","style","display","gap","timezones","map","tz","onClick","handleConvert","converted","DateTime","fromISO","zone","setZone","toFormat"],"sourceRoot":""}